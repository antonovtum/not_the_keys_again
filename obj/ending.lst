                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module ending
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _LCD_isr
                                     12 	.globl _VBL_isr
                                     13 	.globl _itoa
                                     14 	.globl _set_win_tile_xy
                                     15 	.globl _set_win_tiles
                                     16 	.globl _set_interrupts
                                     17 	.globl _add_LCD
                                     18 	.globl _add_VBL
                                     19 	.globl _remove_LCD
                                     20 	.globl _remove_VBL
                                     21 	.globl _ending_flags
                                     22 	.globl _ending_init
                                     23 	.globl _compute_ending_frame
                                     24 ;--------------------------------------------------------
                                     25 ; special function registers
                                     26 ;--------------------------------------------------------
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _DATA
                           000000    31 G$ending_flags$0_0$0==.
      000000                         32 _ending_flags::
      000000                         33 	.ds 1
                           000001    34 Fending$subpix_speed$0_0$0==.
      000001                         35 _subpix_speed:
      000001                         36 	.ds 1
                           000002    37 Fending$force$0_0$0==.
      000002                         38 _force:
      000002                         39 	.ds 1
                           000003    40 Fending$win_height$0_0$0==.
      000003                         41 _win_height:
      000003                         42 	.ds 2
                           000005    43 Fending$max_scan$0_0$0==.
      000005                         44 _max_scan:
      000005                         45 	.ds 1
                           000006    46 Fending$score_text$0_0$0==.
      000006                         47 _score_text:
      000006                         48 	.ds 5
                           00000B    49 Fending$i$0_0$0==.
      00000B                         50 _i:
      00000B                         51 	.ds 1
                                     52 ;--------------------------------------------------------
                                     53 ; ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area _INITIALIZED
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area _DABS (ABS)
                                     60 ;--------------------------------------------------------
                                     61 ; global & static initialisations
                                     62 ;--------------------------------------------------------
                                     63 	.area _HOME
                                     64 	.area _GSINIT
                                     65 	.area _GSFINAL
                                     66 	.area _GSINIT
                                     67 ;--------------------------------------------------------
                                     68 ; Home
                                     69 ;--------------------------------------------------------
                                     70 	.area _HOME
                                     71 	.area _HOME
                                     72 ;--------------------------------------------------------
                                     73 ; code
                                     74 ;--------------------------------------------------------
                                     75 	.area _CODE
                           000000    76 	G$VBL_isr$0$0	= .
                                     77 	.globl	G$VBL_isr$0$0
                           000000    78 	C$ending.c$36$0_0$125	= .
                                     79 	.globl	C$ending.c$36$0_0$125
                                     80 ;src/ending.c:36: void VBL_isr() { 
                                     81 ;	---------------------------------
                                     82 ; Function VBL_isr
                                     83 ; ---------------------------------
      000000                         84 _VBL_isr::
                           000000    85 	C$ending.c$37$1_0$125	= .
                                     86 	.globl	C$ending.c$37$1_0$125
                                     87 ;src/ending.c:37: SHOW_WIN;
      000000 F0r00                   88 	ldh	a, (_LCDC_REG + 0)
      000002 F6 20                   89 	or	a, #0x20
      000004 E0r00                   90 	ldh	(_LCDC_REG + 0), a
                           000006    91 	C$ending.c$38$1_0$125	= .
                                     92 	.globl	C$ending.c$38$1_0$125
                                     93 ;src/ending.c:38: LYC_REG = max_scan; 
      000006 FAr05r00                94 	ld	a, (#_max_scan)
      000009 E0r00                   95 	ldh	(_LYC_REG + 0), a
                           00000B    96 	C$ending.c$39$1_0$125	= .
                                     97 	.globl	C$ending.c$39$1_0$125
                                     98 ;src/ending.c:39: }
                           00000B    99 	C$ending.c$39$1_0$125	= .
                                    100 	.globl	C$ending.c$39$1_0$125
                           00000B   101 	XG$VBL_isr$0$0	= .
                                    102 	.globl	XG$VBL_isr$0$0
      00000B C9                     103 	ret
                           00000C   104 	G$LCD_isr$0$0	= .
                                    105 	.globl	G$LCD_isr$0$0
                           00000C   106 	C$ending.c$40$1_0$126	= .
                                    107 	.globl	C$ending.c$40$1_0$126
                                    108 ;src/ending.c:40: void LCD_isr() {
                                    109 ;	---------------------------------
                                    110 ; Function LCD_isr
                                    111 ; ---------------------------------
      00000C                        112 _LCD_isr::
                           00000C   113 	C$ending.c$41$1_0$126	= .
                                    114 	.globl	C$ending.c$41$1_0$126
                                    115 ;src/ending.c:41: if (LY_REG < 144) HIDE_WIN;
      00000C F0r00                  116 	ldh	a, (_LY_REG + 0)
      00000E D6 90                  117 	sub	a, #0x90
      000010 D0                     118 	ret	NC
      000011 F0r00                  119 	ldh	a, (_LCDC_REG + 0)
      000013 E6 DF                  120 	and	a, #0xdf
      000015 E0r00                  121 	ldh	(_LCDC_REG + 0), a
                           000017   122 	C$ending.c$42$1_0$126	= .
                                    123 	.globl	C$ending.c$42$1_0$126
                                    124 ;src/ending.c:42: }
                           000017   125 	C$ending.c$42$1_0$126	= .
                                    126 	.globl	C$ending.c$42$1_0$126
                           000017   127 	XG$LCD_isr$0$0	= .
                                    128 	.globl	XG$LCD_isr$0$0
      000017 C9                     129 	ret
                           000018   130 	G$ending_init$0$0	= .
                                    131 	.globl	G$ending_init$0$0
                           000018   132 	C$ending.c$44$1_0$128	= .
                                    133 	.globl	C$ending.c$44$1_0$128
                                    134 ;src/ending.c:44: void ending_init(void){
                                    135 ;	---------------------------------
                                    136 ; Function ending_init
                                    137 ; ---------------------------------
      000018                        138 _ending_init::
                           000018   139 	C$ending.c$45$1_0$128	= .
                                    140 	.globl	C$ending.c$45$1_0$128
                                    141 ;src/ending.c:45: ending_flags = 0b10000000;
      000018 21r00r00               142 	ld	hl, #_ending_flags
      00001B 36 80                  143 	ld	(hl), #0x80
                           00001D   144 	C$ending.c$48$1_0$128	= .
                                    145 	.globl	C$ending.c$48$1_0$128
                                    146 ;src/ending.c:48: remove_VBL(VBL_isr);
      00001D 11r00r00               147 	ld	de, #_VBL_isr
      000020 D5                     148 	push	de
      000021 CDr00r00               149 	call	_remove_VBL
      000024 E1                     150 	pop	hl
                           000025   151 	C$ending.c$49$1_0$128	= .
                                    152 	.globl	C$ending.c$49$1_0$128
                                    153 ;src/ending.c:49: remove_LCD(LCD_isr);
      000025 11r0Cr00               154 	ld	de, #_LCD_isr
      000028 D5                     155 	push	de
      000029 CDr00r00               156 	call	_remove_LCD
      00002C E1                     157 	pop	hl
                                    158 ;C:/gbdk/include/gb/gb.h:1546: shadow_OAM[nb].y = 0;
      00002D 21r50r00               159 	ld	hl, #(_shadow_OAM + 80)
      000030 36 00                  160 	ld	(hl), #0x00
      000032 21r54r00               161 	ld	hl, #(_shadow_OAM + 84)
      000035 36 00                  162 	ld	(hl), #0x00
      000037 21r58r00               163 	ld	hl, #(_shadow_OAM + 88)
      00003A 36 00                  164 	ld	(hl), #0x00
      00003C 21r5Cr00               165 	ld	hl, #(_shadow_OAM + 92)
      00003F 36 00                  166 	ld	(hl), #0x00
      000041 21r60r00               167 	ld	hl, #(_shadow_OAM + 96)
      000044 36 00                  168 	ld	(hl), #0x00
      000046 21r64r00               169 	ld	hl, #(_shadow_OAM + 100)
      000049 36 00                  170 	ld	(hl), #0x00
                           00004B   171 	C$ending.c$56$3_0$128	= .
                                    172 	.globl	C$ending.c$56$3_0$128
                                    173 ;src/ending.c:56: hide_sprite(25);
                           00004B   174 	C$ending.c$57$3_0$128	= .
                                    175 	.globl	C$ending.c$57$3_0$128
                                    176 ;src/ending.c:57: }
                           00004B   177 	C$ending.c$57$3_0$128	= .
                                    178 	.globl	C$ending.c$57$3_0$128
                           00004B   179 	XG$ending_init$0$0	= .
                                    180 	.globl	XG$ending_init$0$0
      00004B C9                     181 	ret
                           00004C   182 	Fending$prepare_ending_frame$0$0	= .
                                    183 	.globl	Fending$prepare_ending_frame$0$0
                           00004C   184 	C$ending.c$59$3_0$148	= .
                                    185 	.globl	C$ending.c$59$3_0$148
                                    186 ;src/ending.c:59: void prepare_ending_frame(void){
                                    187 ;	---------------------------------
                                    188 ; Function prepare_ending_frame
                                    189 ; ---------------------------------
      00004C                        190 _prepare_ending_frame:
      00004C 3B                     191 	dec	sp
                           00004D   192 	C$ending.c$61$1_0$148	= .
                                    193 	.globl	C$ending.c$61$1_0$148
                                    194 ;src/ending.c:61: if(IS_ANIMATION_STARTED) {return;}
      00004D FAr00r00               195 	ld	a, (#_ending_flags)
      000050 CB 57                  196 	bit	2, a
      000052 C2r37r01               197 	jp	NZ,00116$
                           000055   198 	C$ending.c$63$1_0$148	= .
                                    199 	.globl	C$ending.c$63$1_0$148
                                    200 ;src/ending.c:63: ending_flags |= 0x04; //mark is_ended as true
      000055 21r00r00               201 	ld	hl, #_ending_flags
      000058 7E                     202 	ld	a, (hl)
      000059 F6 04                  203 	or	a, #0x04
      00005B 77                     204 	ld	(hl), a
                           00005C   205 	C$ending.c$64$1_0$148	= .
                                    206 	.globl	C$ending.c$64$1_0$148
                                    207 ;src/ending.c:64: win_height = 0xB000u;
      00005C 21r03r00               208 	ld	hl, #_win_height
      00005F AF                     209 	xor	a, a
      000060 22                     210 	ld	(hl+), a
      000061 36 B0                  211 	ld	(hl), #0xb0
                           000063   212 	C$ending.c$66$1_0$148	= .
                                    213 	.globl	C$ending.c$66$1_0$148
                                    214 ;src/ending.c:66: force = 4u; //initial force is 4u
      000063 21r02r00               215 	ld	hl, #_force
      000066 36 04                  216 	ld	(hl), #0x04
                           000068   217 	C$ending.c$69$1_0$148	= .
                                    218 	.globl	C$ending.c$69$1_0$148
                                    219 ;src/ending.c:69: set_win_tiles(0,0, 20U, 3U, hud_map);
      000068 11r00r00               220 	ld	de, #_hud_map
      00006B D5                     221 	push	de
      00006C 21 14 03               222 	ld	hl, #0x314
      00006F E5                     223 	push	hl
      000070 AF                     224 	xor	a, a
      000071 0F                     225 	rrca
      000072 F5                     226 	push	af
      000073 CDr00r00               227 	call	_set_win_tiles
      000076 E8 06                  228 	add	sp, #6
                           000078   229 	C$ending.c$70$1_0$148	= .
                                    230 	.globl	C$ending.c$70$1_0$148
                                    231 ;src/ending.c:70: itoa(score, score_text, 10);
      000078 01r06r00               232 	ld	bc, #_score_text+0
      00007B 59                     233 	ld	e, c
      00007C 50                     234 	ld	d, b
      00007D 21r00r00               235 	ld	hl, #_score
      000080 6E                     236 	ld	l, (hl)
                                    237 ;	spillPairReg hl
                                    238 ;	spillPairReg hl
      000081 FAr01r00               239 	ld	a, (_score + 1)
      000084 67                     240 	ld	h, a
                                    241 ;	spillPairReg hl
                                    242 ;	spillPairReg hl
      000085 C5                     243 	push	bc
      000086 3E 0A                  244 	ld	a, #0x0a
      000088 F5                     245 	push	af
      000089 33                     246 	inc	sp
      00008A D5                     247 	push	de
      00008B E5                     248 	push	hl
      00008C CDr00r00               249 	call	_itoa
      00008F E8 05                  250 	add	sp, #5
      000091 C1                     251 	pop	bc
                           000092   252 	C$ending.c$71$2_0$150	= .
                                    253 	.globl	C$ending.c$71$2_0$150
                                    254 ;src/ending.c:71: for(i=0; score_text[i] != 0 && i < 5; i++){
      000092 21r0Br00               255 	ld	hl, #_i
      000095 36 00                  256 	ld	(hl), #0x00
      000097                        257 00114$:
      000097 79                     258 	ld	a, c
      000098 21r0Br00               259 	ld	hl, #_i
      00009B 86                     260 	add	a, (hl)
      00009C 5F                     261 	ld	e, a
      00009D 78                     262 	ld	a, b
      00009E CE 00                  263 	adc	a, #0x00
      0000A0 57                     264 	ld	d, a
      0000A1 1A                     265 	ld	a, (de)
      0000A2 F8 00                  266 	ldhl	sp,	#0
      0000A4 77                     267 	ld	(hl), a
      0000A5 7E                     268 	ld	a, (hl)
      0000A6 B7                     269 	or	a, a
      0000A7 28 13                  270 	jr	Z, 00103$
      0000A9 FAr0Br00               271 	ld	a, (#_i)
      0000AC D6 05                  272 	sub	a, #0x05
      0000AE 30 0C                  273 	jr	NC, 00103$
                           0000B0   274 	C$ending.c$72$3_0$151	= .
                                    275 	.globl	C$ending.c$72$3_0$151
                                    276 ;src/ending.c:72: score_text[i] += 64U;
      0000B0 F8 00                  277 	ldhl	sp,	#0
      0000B2 7E                     278 	ld	a, (hl)
      0000B3 C6 40                  279 	add	a, #0x40
      0000B5 12                     280 	ld	(de), a
                           0000B6   281 	C$ending.c$71$2_0$150	= .
                                    282 	.globl	C$ending.c$71$2_0$150
                                    283 ;src/ending.c:71: for(i=0; score_text[i] != 0 && i < 5; i++){
      0000B6 21r0Br00               284 	ld	hl, #_i
      0000B9 34                     285 	inc	(hl)
      0000BA 18 DB                  286 	jr	00114$
      0000BC                        287 00103$:
                           0000BC   288 	C$ending.c$74$1_0$148	= .
                                    289 	.globl	C$ending.c$74$1_0$148
                                    290 ;src/ending.c:74: set_win_tiles(8, 1, i, 1, score_text);
      0000BC C5                     291 	push	bc
      0000BD 3E 01                  292 	ld	a, #0x01
      0000BF F5                     293 	push	af
      0000C0 33                     294 	inc	sp
      0000C1 FAr0Br00               295 	ld	a, (#_i)
      0000C4 67                     296 	ld	h, a
      0000C5 2E 01                  297 	ld	l, #0x01
      0000C7 E5                     298 	push	hl
      0000C8 3E 08                  299 	ld	a, #0x08
      0000CA F5                     300 	push	af
      0000CB 33                     301 	inc	sp
      0000CC CDr00r00               302 	call	_set_win_tiles
      0000CF E8 06                  303 	add	sp, #6
                           0000D1   304 	C$ending.c$75$1_0$148	= .
                                    305 	.globl	C$ending.c$75$1_0$148
                                    306 ;src/ending.c:75: set_win_tile_xy(8 + i, 1, 0x7A);
      0000D1 21r0Br00               307 	ld	hl, #_i
      0000D4 7E                     308 	ld	a, (hl)
      0000D5 C6 08                  309 	add	a, #0x08
      0000D7 26 7A                  310 	ld	h, #0x7a
                                    311 ;	spillPairReg hl
                                    312 ;	spillPairReg hl
      0000D9 E5                     313 	push	hl
      0000DA 33                     314 	inc	sp
      0000DB 26 01                  315 	ld	h, #0x01
                                    316 ;	spillPairReg hl
                                    317 ;	spillPairReg hl
      0000DD E5                     318 	push	hl
      0000DE 33                     319 	inc	sp
      0000DF F5                     320 	push	af
      0000E0 33                     321 	inc	sp
      0000E1 CDr00r00               322 	call	_set_win_tile_xy
      0000E4 E8 03                  323 	add	sp, #3
                                    324 ;C:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0000E6 21r52r00               325 	ld	hl, #(_shadow_OAM + 82)
      0000E9 36 81                  326 	ld	(hl), #0x81
                                    327 ;C:/gbdk/include/gb/gb.h:1493: shadow_OAM[nb].prop=prop;
      0000EB 21r53r00               328 	ld	hl, #(_shadow_OAM + 83)
      0000EE 36 40                  329 	ld	(hl), #0x40
                                    330 ;C:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0000F0 21r56r00               331 	ld	hl, #(_shadow_OAM + 86)
      0000F3 36 80                  332 	ld	(hl), #0x80
                                    333 ;C:/gbdk/include/gb/gb.h:1493: shadow_OAM[nb].prop=prop;
      0000F5 21r57r00               334 	ld	hl, #(_shadow_OAM + 87)
      0000F8 36 40                  335 	ld	(hl), #0x40
                                    336 ;C:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0000FA 21r5Ar00               337 	ld	hl, #(_shadow_OAM + 90)
      0000FD 36 23                  338 	ld	(hl), #0x23
      0000FF 21r5Er00               339 	ld	hl, #(_shadow_OAM + 94)
      000102 36 23                  340 	ld	(hl), #0x23
      000104 21r62r00               341 	ld	hl, #(_shadow_OAM + 98)
      000107 36 24                  342 	ld	(hl), #0x24
      000109 21r66r00               343 	ld	hl, #(_shadow_OAM + 102)
      00010C 36 24                  344 	ld	(hl), #0x24
                           00010E   345 	C$ending.c$88$1_0$148	= .
                                    346 	.globl	C$ending.c$88$1_0$148
                                    347 ;src/ending.c:88: subpix_speed = 252u;
      00010E 21r01r00               348 	ld	hl, #_subpix_speed
      000111 36 FC                  349 	ld	(hl), #0xfc
                           000113   350 	C$ending.c$96$1_0$148	= .
                                    351 	.globl	C$ending.c$96$1_0$148
                                    352 ;src/ending.c:96: }
      000113 F3                     353 	di
                           000114   354 	C$ending.c$91$2_0$152	= .
                                    355 	.globl	C$ending.c$91$2_0$152
                                    356 ;src/ending.c:91: add_VBL(VBL_isr);
      000114 11r00r00               357 	ld	de, #_VBL_isr
      000117 D5                     358 	push	de
      000118 CDr00r00               359 	call	_add_VBL
      00011B E1                     360 	pop	hl
                           00011C   361 	C$ending.c$92$2_0$152	= .
                                    362 	.globl	C$ending.c$92$2_0$152
                                    363 ;src/ending.c:92: add_LCD(LCD_isr);
      00011C 11r0Cr00               364 	ld	de, #_LCD_isr
      00011F D5                     365 	push	de
      000120 CDr00r00               366 	call	_add_LCD
      000123 E1                     367 	pop	hl
                           000124   368 	C$ending.c$93$2_0$152	= .
                                    369 	.globl	C$ending.c$93$2_0$152
                                    370 ;src/ending.c:93: set_interrupts(VBL_IFLAG | LCD_IFLAG);
      000124 3E 03                  371 	ld	a, #0x03
      000126 F5                     372 	push	af
      000127 33                     373 	inc	sp
      000128 CDr00r00               374 	call	_set_interrupts
      00012B 33                     375 	inc	sp
                           00012C   376 	C$ending.c$94$2_0$152	= .
                                    377 	.globl	C$ending.c$94$2_0$152
                                    378 ;src/ending.c:94: STAT_REG |= 0x40; // enable LY == LYC mode 
      00012C F0r00                  379 	ldh	a, (_STAT_REG + 0)
      00012E F6 40                  380 	or	a, #0x40
      000130 E0r00                  381 	ldh	(_STAT_REG + 0), a
                           000132   382 	C$ending.c$95$2_0$152	= .
                                    383 	.globl	C$ending.c$95$2_0$152
                                    384 ;src/ending.c:95: LYC_REG = 160u;   // make it never fire
      000132 3E A0                  385 	ld	a, #0xa0
      000134 E0r00                  386 	ldh	(_LYC_REG + 0), a
      000136 FB                     387 	ei
      000137                        388 00116$:
                           000137   389 	C$ending.c$97$2_0$148	= .
                                    390 	.globl	C$ending.c$97$2_0$148
                                    391 ;src/ending.c:97: }
      000137 33                     392 	inc	sp
                           000138   393 	C$ending.c$97$2_0$148	= .
                                    394 	.globl	C$ending.c$97$2_0$148
                           000138   395 	XFending$prepare_ending_frame$0$0	= .
                                    396 	.globl	XFending$prepare_ending_frame$0$0
      000138 C9                     397 	ret
                           000139   398 	G$compute_ending_frame$0$0	= .
                                    399 	.globl	G$compute_ending_frame$0$0
                           000139   400 	C$ending.c$99$2_0$178	= .
                                    401 	.globl	C$ending.c$99$2_0$178
                                    402 ;src/ending.c:99: void compute_ending_frame(void){
                                    403 ;	---------------------------------
                                    404 ; Function compute_ending_frame
                                    405 ; ---------------------------------
      000139                        406 _compute_ending_frame::
                           000139   407 	C$ending.c$100$1_0$178	= .
                                    408 	.globl	C$ending.c$100$1_0$178
                                    409 ;src/ending.c:100: prepare_ending_frame();
      000139 CDr4Cr00               410 	call	_prepare_ending_frame
                                    411 ;src/ending.c:101: move_win(7u, WIN_PIXEL);
      00013C 21r04r00               412 	ld	hl, #_win_height + 1
      00013F 4E                     413 	ld	c, (hl)
      000140 41                     414 	ld	b, c
                                    415 ;C:/gbdk/include/gb/gb.h:1316: WX_REG=x, WY_REG=y;
      000141 3E 07                  416 	ld	a, #0x07
      000143 E0r00                  417 	ldh	(_WX_REG + 0), a
      000145 78                     418 	ld	a, b
      000146 E0r00                  419 	ldh	(_WY_REG + 0), a
                                    420 ;src/ending.c:102: move_sprite(20, 8, WIN_PIXEL + 8u);
      000148 79                     421 	ld	a, c
      000149 C6 08                  422 	add	a, #0x08
                                    423 ;C:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
                                    424 ;C:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      00014B 21r50r00               425 	ld	hl, #(_shadow_OAM + 80)
      00014E 22                     426 	ld	(hl+), a
      00014F 36 08                  427 	ld	(hl), #0x08
                                    428 ;src/ending.c:103: move_sprite(21, 160, WIN_PIXEL + 8u);
      000151 FAr04r00               429 	ld	a, (#_win_height + 1)
      000154 C6 08                  430 	add	a, #0x08
      000156 4F                     431 	ld	c, a
                                    432 ;C:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      000157 21r54r00               433 	ld	hl, #(_shadow_OAM + 84)
                                    434 ;C:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      00015A 71                     435 	ld	(hl), c
      00015B 23                     436 	inc	hl
      00015C 36 A0                  437 	ld	(hl), #0xa0
                                    438 ;src/ending.c:104: move_sprite(22, 8, WIN_PIXEL - 8);
      00015E FAr04r00               439 	ld	a, (#_win_height + 1)
      000161 C6 F8                  440 	add	a, #0xf8
                                    441 ;C:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
                                    442 ;C:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      000163 21r58r00               443 	ld	hl, #(_shadow_OAM + 88)
      000166 22                     444 	ld	(hl+), a
      000167 36 08                  445 	ld	(hl), #0x08
                                    446 ;src/ending.c:105: move_sprite(23, 160, WIN_PIXEL - 8);
      000169 FAr04r00               447 	ld	a, (#_win_height + 1)
      00016C C6 F8                  448 	add	a, #0xf8
      00016E 4F                     449 	ld	c, a
                                    450 ;C:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      00016F 21r5Cr00               451 	ld	hl, #(_shadow_OAM + 92)
                                    452 ;C:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      000172 71                     453 	ld	(hl), c
      000173 23                     454 	inc	hl
      000174 36 A0                  455 	ld	(hl), #0xa0
                                    456 ;src/ending.c:106: move_sprite(24, 8, WIN_PIXEL);
      000176 21r04r00               457 	ld	hl, #_win_height + 1
      000179 4E                     458 	ld	c, (hl)
                                    459 ;C:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      00017A 21r60r00               460 	ld	hl, #(_shadow_OAM + 96)
                                    461 ;C:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      00017D 71                     462 	ld	(hl), c
      00017E 23                     463 	inc	hl
      00017F 36 08                  464 	ld	(hl), #0x08
                                    465 ;src/ending.c:107: move_sprite(25, 160, WIN_PIXEL);
      000181 21r04r00               466 	ld	hl, #_win_height + 1
      000184 4E                     467 	ld	c, (hl)
                                    468 ;C:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      000185 21r64r00               469 	ld	hl, #(_shadow_OAM + 100)
                                    470 ;C:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      000188 71                     471 	ld	(hl), c
      000189 23                     472 	inc	hl
      00018A 36 A0                  473 	ld	(hl), #0xa0
                           00018C   474 	C$ending.c$110$1_0$178	= .
                                    475 	.globl	C$ending.c$110$1_0$178
                                    476 ;src/ending.c:110: if(subpix_speed > MAX_SPEED) {
      00018C 3E 0D                  477 	ld	a, #0x0d
      00018E 21r01r00               478 	ld	hl, #_subpix_speed
      000191 96                     479 	sub	a, (hl)
      000192 30 13                  480 	jr	NC, 00104$
                           000194   481 	C$ending.c$111$2_0$179	= .
                                    482 	.globl	C$ending.c$111$2_0$179
                                    483 ;src/ending.c:111: ending_flags &= 0b11110111; //IS_FORCE_ADDED = false
      000194 21r00r00               484 	ld	hl, #_ending_flags
      000197 7E                     485 	ld	a, (hl)
      000198 E6 F7                  486 	and	a, #0xf7
      00019A 77                     487 	ld	(hl), a
                                    488 ;C:/gbdk/include/gb/gb.h:1493: shadow_OAM[nb].prop=prop;
      00019B 21r63r00               489 	ld	hl, #(_shadow_OAM + 99)
      00019E 36 20                  490 	ld	(hl), #0x20
      0001A0 21r67r00               491 	ld	hl, #(_shadow_OAM + 103)
      0001A3 36 20                  492 	ld	(hl), #0x20
                           0001A5   493 	C$ending.c$113$1_0$178	= .
                                    494 	.globl	C$ending.c$113$1_0$178
                                    495 ;src/ending.c:113: set_sprite_prop(25, S_FLIPX);
      0001A5 18 20                  496 	jr	00105$
      0001A7                        497 00104$:
                           0001A7   498 	C$ending.c$115$1_0$178	= .
                                    499 	.globl	C$ending.c$115$1_0$178
                                    500 ;src/ending.c:115: else if(subpix_speed == 0) {
      0001A7 FAr01r00               501 	ld	a, (#_subpix_speed)
      0001AA B7                     502 	or	a, a
      0001AB 20 1A                  503 	jr	NZ, 00105$
                           0001AD   504 	C$ending.c$117$2_0$180	= .
                                    505 	.globl	C$ending.c$117$2_0$180
                                    506 ;src/ending.c:117: ending_flags |= 0b00001001; //IS_FORCE_ADDED = true, IS_ANIMATION_FINISHED = true
      0001AD 21r00r00               507 	ld	hl, #_ending_flags
      0001B0 7E                     508 	ld	a, (hl)
      0001B1 F6 09                  509 	or	a, #0x09
      0001B3 77                     510 	ld	(hl), a
                           0001B4   511 	C$ending.c$118$2_0$180	= .
                                    512 	.globl	C$ending.c$118$2_0$180
                                    513 ;src/ending.c:118: ending_flags ^= 0b00000010; //swap WIN_DIRECTION
      0001B4 7E                     514 	ld	a, (hl)
      0001B5 EE 02                  515 	xor	a, #0x02
      0001B7 77                     516 	ld	(hl), a
                           0001B8   517 	C$ending.c$119$2_0$180	= .
                                    518 	.globl	C$ending.c$119$2_0$180
                                    519 ;src/ending.c:119: force = 0x00; //make the force smaller for the sway, 0 so it turns to 1 now
      0001B8 21r02r00               520 	ld	hl, #_force
      0001BB 36 00                  521 	ld	(hl), #0x00
                                    522 ;C:/gbdk/include/gb/gb.h:1493: shadow_OAM[nb].prop=prop;
      0001BD 21r63r00               523 	ld	hl, #(_shadow_OAM + 99)
      0001C0 36 00                  524 	ld	(hl), #0x00
      0001C2 21r67r00               525 	ld	hl, #(_shadow_OAM + 103)
      0001C5 36 00                  526 	ld	(hl), #0x00
                           0001C7   527 	C$ending.c$121$1_0$178	= .
                                    528 	.globl	C$ending.c$121$1_0$178
                                    529 ;src/ending.c:121: set_sprite_prop(25, 0x00);
      0001C7                        530 00105$:
                           0001C7   531 	C$ending.c$111$1_0$178	= .
                                    532 	.globl	C$ending.c$111$1_0$178
                                    533 ;src/ending.c:111: ending_flags &= 0b11110111; //IS_FORCE_ADDED = false
      0001C7 21r00r00               534 	ld	hl, #_ending_flags
      0001CA 5E                     535 	ld	e, (hl)
                           0001CB   536 	C$ending.c$124$1_0$178	= .
                                    537 	.globl	C$ending.c$124$1_0$178
                                    538 ;src/ending.c:124: if(IS_ANIMATION_FINISHED){      
      0001CB CB 43                  539 	bit	0, e
      0001CD 28 07                  540 	jr	Z, 00107$
                           0001CF   541 	C$ending.c$125$2_0$181	= .
                                    542 	.globl	C$ending.c$125$2_0$181
                                    543 ;src/ending.c:125: force ^= 0x01; //make the force smaller for the sway, either 1 or 0
      0001CF 21r02r00               544 	ld	hl, #_force
      0001D2 7E                     545 	ld	a, (hl)
      0001D3 EE 01                  546 	xor	a, #0x01
      0001D5 77                     547 	ld	(hl), a
      0001D6                        548 00107$:
                           0001D6   549 	C$ending.c$127$1_0$178	= .
                                    550 	.globl	C$ending.c$127$1_0$178
                                    551 ;src/ending.c:127: subpix_speed = (IS_FORCE_ADDED) ? subpix_speed + force : subpix_speed - force;
      0001D6 CB 5B                  552 	bit	3, e
      0001D8 28 09                  553 	jr	Z, 00121$
      0001DA FAr01r00               554 	ld	a, (#_subpix_speed)
      0001DD 21r02r00               555 	ld	hl, #_force
      0001E0 86                     556 	add	a, (hl)
      0001E1 18 07                  557 	jr	00122$
      0001E3                        558 00121$:
      0001E3 FAr01r00               559 	ld	a, (#_subpix_speed)
      0001E6 21r02r00               560 	ld	hl, #_force
      0001E9 96                     561 	sub	a, (hl)
      0001EA                        562 00122$:
      0001EA 21r01r00               563 	ld	hl, #_subpix_speed
      0001ED 77                     564 	ld	(hl), a
                           0001EE   565 	C$ending.c$128$1_0$178	= .
                                    566 	.globl	C$ending.c$128$1_0$178
                                    567 ;src/ending.c:128: win_height = WIN_DIRECTION ? win_height + ((uint16_t)(subpix_speed) << 2) : win_height - ((uint16_t)(subpix_speed) << 2);
      0001EE 6E                     568 	ld	l, (hl)
                                    569 ;	spillPairReg hl
                                    570 ;	spillPairReg hl
      0001EF 26 00                  571 	ld	h, #0x00
                                    572 ;	spillPairReg hl
                                    573 ;	spillPairReg hl
      0001F1 29                     574 	add	hl, hl
      0001F2 29                     575 	add	hl, hl
      0001F3 4D                     576 	ld	c, l
      0001F4 44                     577 	ld	b, h
      0001F5 CB 4B                  578 	bit	1, e
      0001F7 28 0C                  579 	jr	Z, 00123$
      0001F9 79                     580 	ld	a, c
      0001FA 21r03r00               581 	ld	hl, #_win_height
      0001FD 86                     582 	add	a, (hl)
      0001FE 23                     583 	inc	hl
      0001FF 4F                     584 	ld	c, a
      000200 78                     585 	ld	a, b
      000201 8E                     586 	adc	a, (hl)
      000202 47                     587 	ld	b, a
      000203 18 09                  588 	jr	00124$
      000205                        589 00123$:
      000205 21r03r00               590 	ld	hl, #_win_height
      000208 2A                     591 	ld	a, (hl+)
      000209 91                     592 	sub	a, c
      00020A 4F                     593 	ld	c, a
      00020B 7E                     594 	ld	a, (hl)
      00020C 98                     595 	sbc	a, b
      00020D 47                     596 	ld	b, a
      00020E                        597 00124$:
      00020E 21r03r00               598 	ld	hl, #_win_height
      000211 79                     599 	ld	a, c
      000212 22                     600 	ld	(hl+), a
      000213 70                     601 	ld	(hl), b
                           000214   602 	C$ending.c$129$1_0$178	= .
                                    603 	.globl	C$ending.c$129$1_0$178
                                    604 ;src/ending.c:129: max_scan = WIN_PIXEL + 23U;
      000214 7E                     605 	ld	a, (hl)
      000215 C6 17                  606 	add	a, #0x17
      000217 EAr05r00               607 	ld	(#_max_scan),a
                           00021A   608 	C$ending.c$130$1_0$178	= .
                                    609 	.globl	C$ending.c$130$1_0$178
                                    610 ;src/ending.c:130: }
                           00021A   611 	C$ending.c$130$1_0$178	= .
                                    612 	.globl	C$ending.c$130$1_0$178
                           00021A   613 	XG$compute_ending_frame$0$0	= .
                                    614 	.globl	XG$compute_ending_frame$0$0
      00021A C9                     615 	ret
                                    616 	.area _CODE
                                    617 	.area _INITIALIZER
                                    618 	.area _CABS (ABS)
