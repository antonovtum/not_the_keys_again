                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module ending
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _itoa
                                     12 	.globl _set_win_tile_xy
                                     13 	.globl _set_win_tiles
                                     14 	.globl _set_interrupts
                                     15 	.globl _add_LCD
                                     16 	.globl _ending_init
                                     17 	.globl _compute_ending_frame
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area _DATA
                           000000    25 Fending$counter$0_0$0==.
      000000                         26 _counter:
      000000                         27 	.ds 1
                           000001    28 Fending$is_ended$0_0$0==.
      000001                         29 _is_ended:
      000001                         30 	.ds 1
                           000002    31 Fending$win_height$0_0$0==.
      000002                         32 _win_height:
      000002                         33 	.ds 1
                           000003    34 Fending$score_text$0_0$0==.
      000003                         35 _score_text:
      000003                         36 	.ds 5
                           000008    37 Fending$i$0_0$0==.
      000008                         38 _i:
      000008                         39 	.ds 1
                                     40 ;--------------------------------------------------------
                                     41 ; ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area _INITIALIZED
                                     44 ;--------------------------------------------------------
                                     45 ; absolute external ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area _DABS (ABS)
                                     48 ;--------------------------------------------------------
                                     49 ; global & static initialisations
                                     50 ;--------------------------------------------------------
                                     51 	.area _HOME
                                     52 	.area _GSINIT
                                     53 	.area _GSFINAL
                                     54 	.area _GSINIT
                                     55 ;--------------------------------------------------------
                                     56 ; Home
                                     57 ;--------------------------------------------------------
                                     58 	.area _HOME
                                     59 	.area _HOME
                                     60 ;--------------------------------------------------------
                                     61 ; code
                                     62 ;--------------------------------------------------------
                                     63 	.area _CODE
                           000000    64 	Fending$scanline_interrupt_script$0$0	= .
                                     65 	.globl	Fending$scanline_interrupt_script$0$0
                           000000    66 	C$ending.c$27$0_0$126	= .
                                     67 	.globl	C$ending.c$27$0_0$126
                                     68 ;src/ending.c:27: static void scanline_interrupt_script(void){
                                     69 ;	---------------------------------
                                     70 ; Function scanline_interrupt_script
                                     71 ; ---------------------------------
      000000                         72 _scanline_interrupt_script:
                           000000    73 	C$ending.c$28$1_0$126	= .
                                     74 	.globl	C$ending.c$28$1_0$126
                                     75 ;src/ending.c:28: uint8_t max_scan = (win_height + 24U) > 144 ? 144 : (win_height + 24U);
      000000 21r02r00                76 	ld	hl, #_win_height
      000003 4E                      77 	ld	c, (hl)
      000004 06 00                   78 	ld	b, #0x00
      000006 21 18 00                79 	ld	hl, #0x0018
      000009 09                      80 	add	hl, bc
      00000A 3E 90                   81 	ld	a, #0x90
      00000C BD                      82 	cp	a, l
      00000D 3E 00                   83 	ld	a, #0x00
      00000F 9C                      84 	sbc	a, h
      000010 30 05                   85 	jr	NC, 00108$
      000012 01 90 00                86 	ld	bc, #0x0090
      000015 18 06                   87 	jr	00109$
      000017                         88 00108$:
      000017 FAr02r00                89 	ld	a, (#_win_height)
      00001A C6 18                   90 	add	a, #0x18
      00001C 4F                      91 	ld	c, a
      00001D                         92 00109$:
                           00001D    93 	C$ending.c$29$1_0$126	= .
                                     94 	.globl	C$ending.c$29$1_0$126
                                     95 ;src/ending.c:29: if(LYC_REG == 0x00){
      00001D FAr00r00                96 	ld	a, (#_LYC_REG)
      000020 B7                      97 	or	a, a
      000021 20 0A                   98 	jr	NZ, 00104$
                           000023    99 	C$ending.c$30$2_0$127	= .
                                    100 	.globl	C$ending.c$30$2_0$127
                                    101 ;src/ending.c:30: SHOW_WIN;
      000023 F0r00                  102 	ldh	a, (_LCDC_REG + 0)
      000025 F6 20                  103 	or	a, #0x20
      000027 E0r00                  104 	ldh	(_LCDC_REG + 0), a
                           000029   105 	C$ending.c$31$2_0$127	= .
                                    106 	.globl	C$ending.c$31$2_0$127
                                    107 ;src/ending.c:31: LYC_REG = max_scan;
      000029 79                     108 	ld	a, c
      00002A E0r00                  109 	ldh	(_LYC_REG + 0), a
      00002C C9                     110 	ret
      00002D                        111 00104$:
                           00002D   112 	C$ending.c$33$1_0$126	= .
                                    113 	.globl	C$ending.c$33$1_0$126
                                    114 ;src/ending.c:33: else if(LYC_REG == max_scan){
      00002D F0r00                  115 	ldh	a, (_LYC_REG + 0)
      00002F 91                     116 	sub	a, c
      000030 C0                     117 	ret	NZ
                           000031   118 	C$ending.c$34$2_0$128	= .
                                    119 	.globl	C$ending.c$34$2_0$128
                                    120 ;src/ending.c:34: HIDE_WIN;
      000031 F0r00                  121 	ldh	a, (_LCDC_REG + 0)
      000033 E6 DF                  122 	and	a, #0xdf
      000035 E0r00                  123 	ldh	(_LCDC_REG + 0), a
                           000037   124 	C$ending.c$35$2_0$128	= .
                                    125 	.globl	C$ending.c$35$2_0$128
                                    126 ;src/ending.c:35: LYC_REG = 0x00;
      000037 AF                     127 	xor	a, a
      000038 E0r00                  128 	ldh	(_LYC_REG + 0), a
                           00003A   129 	C$ending.c$37$1_0$126	= .
                                    130 	.globl	C$ending.c$37$1_0$126
                                    131 ;src/ending.c:37: }
                           00003A   132 	C$ending.c$37$1_0$126	= .
                                    133 	.globl	C$ending.c$37$1_0$126
                           00003A   134 	XFending$scanline_interrupt_script$0$0	= .
                                    135 	.globl	XFending$scanline_interrupt_script$0$0
      00003A C9                     136 	ret
                           00003B   137 Fending$win_position_table$0_0$0 == .
      00003B                        138 _win_position_table:
      00003B 82                     139 	.db #0x82	; 130
      00003C 64                     140 	.db #0x64	; 100	'd'
      00003D 46                     141 	.db #0x46	; 70	'F'
      00003E 3C                     142 	.db #0x3c	; 60
      00003F 37                     143 	.db #0x37	; 55	'7'
      000040 35                     144 	.db #0x35	; 53	'5'
      000041 37                     145 	.db #0x37	; 55	'7'
      000042 3C                     146 	.db #0x3c	; 60
      000043 4B                     147 	.db #0x4b	; 75	'K'
      000044 50                     148 	.db #0x50	; 80	'P'
                           000045   149 	G$ending_init$0$0	= .
                                    150 	.globl	G$ending_init$0$0
                           000045   151 	C$ending.c$39$1_0$130	= .
                                    152 	.globl	C$ending.c$39$1_0$130
                                    153 ;src/ending.c:39: void ending_init(void){
                                    154 ;	---------------------------------
                                    155 ; Function ending_init
                                    156 ; ---------------------------------
      000045                        157 _ending_init::
                           000045   158 	C$ending.c$40$1_0$130	= .
                                    159 	.globl	C$ending.c$40$1_0$130
                                    160 ;src/ending.c:40: is_ended = false;
      000045 21r01r00               161 	ld	hl, #_is_ended
      000048 36 00                  162 	ld	(hl), #0x00
                           00004A   163 	C$ending.c$41$1_0$130	= .
                                    164 	.globl	C$ending.c$41$1_0$130
                                    165 ;src/ending.c:41: }
                           00004A   166 	C$ending.c$41$1_0$130	= .
                                    167 	.globl	C$ending.c$41$1_0$130
                           00004A   168 	XG$ending_init$0$0	= .
                                    169 	.globl	XG$ending_init$0$0
      00004A C9                     170 	ret
                           00004B   171 	Fending$prepare_ending_frame$0$0	= .
                                    172 	.globl	Fending$prepare_ending_frame$0$0
                           00004B   173 	C$ending.c$43$1_0$132	= .
                                    174 	.globl	C$ending.c$43$1_0$132
                                    175 ;src/ending.c:43: void prepare_ending_frame(void){
                                    176 ;	---------------------------------
                                    177 ; Function prepare_ending_frame
                                    178 ; ---------------------------------
      00004B                        179 _prepare_ending_frame:
      00004B 3B                     180 	dec	sp
                           00004C   181 	C$ending.c$45$1_0$132	= .
                                    182 	.globl	C$ending.c$45$1_0$132
                                    183 ;src/ending.c:45: if(is_ended) return;
      00004C 21r01r00               184 	ld	hl, #_is_ended
      00004F CB 46                  185 	bit	0, (hl)
      000051 C2r08r01               186 	jp	NZ,00109$
                           000054   187 	C$ending.c$47$1_0$132	= .
                                    188 	.globl	C$ending.c$47$1_0$132
                                    189 ;src/ending.c:47: counter = 0;
      000054 21r00r00               190 	ld	hl, #_counter
      000057 36 00                  191 	ld	(hl), #0x00
                           000059   192 	C$ending.c$48$1_0$132	= .
                                    193 	.globl	C$ending.c$48$1_0$132
                                    194 ;src/ending.c:48: is_ended = true;
      000059 21r01r00               195 	ld	hl, #_is_ended
      00005C 36 01                  196 	ld	(hl), #0x01
                           00005E   197 	C$ending.c$49$1_0$132	= .
                                    198 	.globl	C$ending.c$49$1_0$132
                                    199 ;src/ending.c:49: win_height = 70;
      00005E 21r02r00               200 	ld	hl, #_win_height
      000061 36 46                  201 	ld	(hl), #0x46
                           000063   202 	C$ending.c$51$1_0$132	= .
                                    203 	.globl	C$ending.c$51$1_0$132
                                    204 ;src/ending.c:51: set_win_tiles(0,0, 20U, 3U, hud_map);
      000063 11r00r00               205 	ld	de, #_hud_map
      000066 D5                     206 	push	de
      000067 21 14 03               207 	ld	hl, #0x314
      00006A E5                     208 	push	hl
      00006B AF                     209 	xor	a, a
      00006C 0F                     210 	rrca
      00006D F5                     211 	push	af
      00006E CDr00r00               212 	call	_set_win_tiles
      000071 E8 06                  213 	add	sp, #6
                           000073   214 	C$ending.c$52$1_0$132	= .
                                    215 	.globl	C$ending.c$52$1_0$132
                                    216 ;src/ending.c:52: itoa(score, score_text, 10);
      000073 01r03r00               217 	ld	bc, #_score_text+0
      000076 59                     218 	ld	e, c
      000077 50                     219 	ld	d, b
      000078 21r00r00               220 	ld	hl, #_score
      00007B 6E                     221 	ld	l, (hl)
                                    222 ;	spillPairReg hl
                                    223 ;	spillPairReg hl
      00007C FAr01r00               224 	ld	a, (_score + 1)
      00007F 67                     225 	ld	h, a
                                    226 ;	spillPairReg hl
                                    227 ;	spillPairReg hl
      000080 C5                     228 	push	bc
      000081 3E 0A                  229 	ld	a, #0x0a
      000083 F5                     230 	push	af
      000084 33                     231 	inc	sp
      000085 D5                     232 	push	de
      000086 E5                     233 	push	hl
      000087 CDr00r00               234 	call	_itoa
      00008A E8 05                  235 	add	sp, #5
      00008C C1                     236 	pop	bc
                           00008D   237 	C$ending.c$53$2_0$133	= .
                                    238 	.globl	C$ending.c$53$2_0$133
                                    239 ;src/ending.c:53: for(i=0; score_text[i] != 0 && i < 5; i++){
      00008D 21r08r00               240 	ld	hl, #_i
      000090 36 00                  241 	ld	(hl), #0x00
      000092                        242 00107$:
      000092 79                     243 	ld	a, c
      000093 21r08r00               244 	ld	hl, #_i
      000096 86                     245 	add	a, (hl)
      000097 5F                     246 	ld	e, a
      000098 78                     247 	ld	a, b
      000099 CE 00                  248 	adc	a, #0x00
      00009B 57                     249 	ld	d, a
      00009C 1A                     250 	ld	a, (de)
      00009D F8 00                  251 	ldhl	sp,	#0
      00009F 77                     252 	ld	(hl), a
      0000A0 7E                     253 	ld	a, (hl)
      0000A1 B7                     254 	or	a, a
      0000A2 28 13                  255 	jr	Z, 00103$
      0000A4 FAr08r00               256 	ld	a, (#_i)
      0000A7 D6 05                  257 	sub	a, #0x05
      0000A9 30 0C                  258 	jr	NC, 00103$
                           0000AB   259 	C$ending.c$54$3_0$134	= .
                                    260 	.globl	C$ending.c$54$3_0$134
                                    261 ;src/ending.c:54: score_text[i] += 64U;
      0000AB F8 00                  262 	ldhl	sp,	#0
      0000AD 7E                     263 	ld	a, (hl)
      0000AE C6 40                  264 	add	a, #0x40
      0000B0 12                     265 	ld	(de), a
                           0000B1   266 	C$ending.c$53$2_0$133	= .
                                    267 	.globl	C$ending.c$53$2_0$133
                                    268 ;src/ending.c:53: for(i=0; score_text[i] != 0 && i < 5; i++){
      0000B1 21r08r00               269 	ld	hl, #_i
      0000B4 34                     270 	inc	(hl)
      0000B5 18 DB                  271 	jr	00107$
      0000B7                        272 00103$:
                           0000B7   273 	C$ending.c$56$1_0$132	= .
                                    274 	.globl	C$ending.c$56$1_0$132
                                    275 ;src/ending.c:56: set_win_tiles(8, 1, i, 1, score_text);
      0000B7 C5                     276 	push	bc
      0000B8 3E 01                  277 	ld	a, #0x01
      0000BA F5                     278 	push	af
      0000BB 33                     279 	inc	sp
      0000BC FAr08r00               280 	ld	a, (#_i)
      0000BF 67                     281 	ld	h, a
      0000C0 2E 01                  282 	ld	l, #0x01
      0000C2 E5                     283 	push	hl
      0000C3 3E 08                  284 	ld	a, #0x08
      0000C5 F5                     285 	push	af
      0000C6 33                     286 	inc	sp
      0000C7 CDr00r00               287 	call	_set_win_tiles
      0000CA E8 06                  288 	add	sp, #6
                           0000CC   289 	C$ending.c$57$1_0$132	= .
                                    290 	.globl	C$ending.c$57$1_0$132
                                    291 ;src/ending.c:57: set_win_tile_xy(8 + i, 1, 0x7A);
      0000CC 21r08r00               292 	ld	hl, #_i
      0000CF 7E                     293 	ld	a, (hl)
      0000D0 C6 08                  294 	add	a, #0x08
      0000D2 26 7A                  295 	ld	h, #0x7a
                                    296 ;	spillPairReg hl
                                    297 ;	spillPairReg hl
      0000D4 E5                     298 	push	hl
      0000D5 33                     299 	inc	sp
      0000D6 26 01                  300 	ld	h, #0x01
                                    301 ;	spillPairReg hl
                                    302 ;	spillPairReg hl
      0000D8 E5                     303 	push	hl
      0000D9 33                     304 	inc	sp
      0000DA F5                     305 	push	af
      0000DB 33                     306 	inc	sp
      0000DC CDr00r00               307 	call	_set_win_tile_xy
      0000DF E8 03                  308 	add	sp, #3
                                    309 ;C:/gbdk/include/gb/gb.h:1316: WX_REG=x, WY_REG=y;
      0000E1 3E 07                  310 	ld	a, #0x07
      0000E3 E0r00                  311 	ldh	(_WX_REG + 0), a
      0000E5 3E 78                  312 	ld	a, #0x78
      0000E7 E0r00                  313 	ldh	(_WY_REG + 0), a
                           0000E9   314 	C$ending.c$60$1_0$132	= .
                                    315 	.globl	C$ending.c$60$1_0$132
                                    316 ;src/ending.c:60: SHOW_WIN;
      0000E9 F0r00                  317 	ldh	a, (_LCDC_REG + 0)
      0000EB F6 20                  318 	or	a, #0x20
      0000ED E0r00                  319 	ldh	(_LCDC_REG + 0), a
                           0000EF   320 	C$ending.c$66$1_0$132	= .
                                    321 	.globl	C$ending.c$66$1_0$132
                                    322 ;src/ending.c:66: }
      0000EF F3                     323 	di
                           0000F0   324 	C$ending.c$63$2_0$135	= .
                                    325 	.globl	C$ending.c$63$2_0$135
                                    326 ;src/ending.c:63: STAT_REG = STATF_LYC | STATF_MODE01;
      0000F0 3E 50                  327 	ld	a, #0x50
      0000F2 E0r00                  328 	ldh	(_STAT_REG + 0), a
                           0000F4   329 	C$ending.c$64$2_0$135	= .
                                    330 	.globl	C$ending.c$64$2_0$135
                                    331 ;src/ending.c:64: LYC_REG = 0x00;
      0000F4 AF                     332 	xor	a, a
      0000F5 E0r00                  333 	ldh	(_LYC_REG + 0), a
                           0000F7   334 	C$ending.c$65$2_0$135	= .
                                    335 	.globl	C$ending.c$65$2_0$135
                                    336 ;src/ending.c:65: add_LCD(scanline_interrupt_script);
      0000F7 11r00r00               337 	ld	de, #_scanline_interrupt_script
      0000FA D5                     338 	push	de
      0000FB CDr00r00               339 	call	_add_LCD
      0000FE E1                     340 	pop	hl
      0000FF FB                     341 	ei
                           000100   342 	C$ending.c$67$1_0$132	= .
                                    343 	.globl	C$ending.c$67$1_0$132
                                    344 ;src/ending.c:67: set_interrupts(VBL_IFLAG | LCD_IFLAG);
      000100 3E 03                  345 	ld	a, #0x03
      000102 F5                     346 	push	af
      000103 33                     347 	inc	sp
      000104 CDr00r00               348 	call	_set_interrupts
      000107 33                     349 	inc	sp
      000108                        350 00109$:
                           000108   351 	C$ending.c$68$1_0$132	= .
                                    352 	.globl	C$ending.c$68$1_0$132
                                    353 ;src/ending.c:68: }
      000108 33                     354 	inc	sp
                           000109   355 	C$ending.c$68$1_0$132	= .
                                    356 	.globl	C$ending.c$68$1_0$132
                           000109   357 	XFending$prepare_ending_frame$0$0	= .
                                    358 	.globl	XFending$prepare_ending_frame$0$0
      000109 C9                     359 	ret
                           00010A   360 	G$compute_ending_frame$0$0	= .
                                    361 	.globl	G$compute_ending_frame$0$0
                           00010A   362 	C$ending.c$70$1_0$140	= .
                                    363 	.globl	C$ending.c$70$1_0$140
                                    364 ;src/ending.c:70: void compute_ending_frame(void){
                                    365 ;	---------------------------------
                                    366 ; Function compute_ending_frame
                                    367 ; ---------------------------------
      00010A                        368 _compute_ending_frame::
                           00010A   369 	C$ending.c$71$1_0$140	= .
                                    370 	.globl	C$ending.c$71$1_0$140
                                    371 ;src/ending.c:71: prepare_ending_frame();
      00010A CDr4Br00               372 	call	_prepare_ending_frame
                           00010D   373 	C$ending.c$73$1_0$140	= .
                                    374 	.globl	C$ending.c$73$1_0$140
                                    375 ;src/ending.c:73: if(counter == 10u) return; //animation ended 
      00010D FAr00r00               376 	ld	a, (#_counter)
      000110 D6 0A                  377 	sub	a, #0x0a
      000112 C8                     378 	ret	Z
      000113 18 00                  379 	jr	00102$
      000115                        380 00102$:
                                    381 ;src/ending.c:75: move_win(7u, win_height);
      000115 21r02r00               382 	ld	hl, #_win_height
      000118 4E                     383 	ld	c, (hl)
                                    384 ;C:/gbdk/include/gb/gb.h:1316: WX_REG=x, WY_REG=y;
      000119 3E 07                  385 	ld	a, #0x07
      00011B E0r00                  386 	ldh	(_WX_REG + 0), a
      00011D 79                     387 	ld	a, c
      00011E E0r00                  388 	ldh	(_WY_REG + 0), a
                           000120   389 	C$ending.c$76$1_0$140	= .
                                    390 	.globl	C$ending.c$76$1_0$140
                                    391 ;src/ending.c:76: win_height = win_height + 1;
      000120 34                     392 	inc	(hl)
      000121 7E                     393 	ld	a, (hl)
                           000122   394 	C$ending.c$77$1_0$140	= .
                                    395 	.globl	C$ending.c$77$1_0$140
                                    396 ;src/ending.c:77: counter++;
      000122 21r00r00               397 	ld	hl, #_counter
      000125 34                     398 	inc	(hl)
                           000126   399 	C$ending.c$80$1_0$140	= .
                                    400 	.globl	C$ending.c$80$1_0$140
                                    401 ;src/ending.c:80: }
                           000126   402 	C$ending.c$80$1_0$140	= .
                                    403 	.globl	C$ending.c$80$1_0$140
                           000126   404 	XG$compute_ending_frame$0$0	= .
                                    405 	.globl	XG$compute_ending_frame$0$0
      000126 C9                     406 	ret
                                    407 	.area _CODE
                                    408 	.area _INITIALIZER
                                    409 	.area _CABS (ABS)
